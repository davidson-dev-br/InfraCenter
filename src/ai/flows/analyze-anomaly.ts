// This file is generated by Firebase Extensions.
'use server';
/**
 * @fileOverview An anomaly analysis AI agent.
 *
 * - analyzeAnomaly - A function that handles the anomaly analysis process.
 * - AnalyzeAnomalyInput - The input type for the analyzeAnomaly function.
 * - AnalyzeAnomalyOutput - The return type for the analyzeAnomaly function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeAnomalyInputSchema = z.object({
  metricName: z.string().describe('The name of the metric that has the anomaly.'),
  timestamp: z.string().describe('The timestamp of the anomaly.'),
  value: z.number().describe('The value of the metric at the time of the anomaly.'),
  context: z.string().describe('Contextual information about the anomaly, such as related events or recent changes.'),
});
export type AnalyzeAnomalyInput = z.infer<typeof AnalyzeAnomalyInputSchema>;

const AnalyzeAnomalyOutputSchema = z.object({
  summary: z.string().describe('A summary of potential causes of the anomaly.'),
  recommendations: z.array(z.string()).describe('Recommended actions to address the anomaly.'),
});
export type AnalyzeAnomalyOutput = z.infer<typeof AnalyzeAnomalyOutputSchema>;

export async function analyzeAnomaly(input: AnalyzeAnomalyInput): Promise<AnalyzeAnomalyOutput> {
  return analyzeAnomalyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeAnomalyPrompt',
  input: {schema: AnalyzeAnomalyInputSchema},
  output: {schema: AnalyzeAnomalyOutputSchema},
  prompt: `You are an expert data center operator.

You will analyze detected anomalies in data center metrics and provide a summary of potential causes and recommended actions.

Metric Name: {{{metricName}}}
Timestamp: {{{timestamp}}}
Value: {{{value}}}
Context: {{{context}}}

Summary of Potential Causes:

Recommended Actions:
`, config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const analyzeAnomalyFlow = ai.defineFlow(
  {
    name: 'analyzeAnomalyFlow',
    inputSchema: AnalyzeAnomalyInputSchema,
    outputSchema: AnalyzeAnomalyOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
