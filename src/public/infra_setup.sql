-- InfraVision Database Setup Script
-- Generated by davidson.dev.br with AI assistance
-- Version: 1.3

-- Drop tables in reverse order of creation to handle dependencies
IF OBJECT_ID('dbo.Connections', 'U') IS NOT NULL DROP TABLE dbo.Connections;
IF OBJECT_ID('dbo.EquipmentPorts', 'U') IS NOT NULL DROP TABLE dbo.EquipmentPorts;
IF OBJECT_ID('dbo.PortTypes', 'U') IS NOT NULL DROP TABLE dbo.PortTypes;
IF OBJECT_ID('dbo.ConnectionTypes', 'U') IS NOT NULL DROP TABLE dbo.ConnectionTypes;
IF OBJECT_ID('dbo.ChildItems', 'U') IS NOT NULL DROP TABLE dbo.ChildItems;
IF OBJECT_ID('dbo.ParentItems', 'U') IS NOT NULL DROP TABLE dbo.ParentItems;
IF OBJECT_ID('dbo.ItemStatuses', 'U') IS NOT NULL DROP TABLE dbo.ItemStatuses;
IF OBJECT_ID('dbo.Models', 'U') IS NOT NULL DROP TABLE dbo.Models;
IF OBJECT_ID('dbo.Manufacturers', 'U') IS NOT NULL DROP TABLE dbo.Manufacturers;
IF OBJECT_ID('dbo.ItemTypes', 'U') IS NOT NULL DROP TABLE dbo.ItemTypes;
IF OBJECT_ID('dbo.ItemTypesEqp', 'U') IS NOT NULL DROP TABLE dbo.ItemTypesEqp;
IF OBJECT_ID('dbo.Rooms', 'U') IS NOT NULL DROP TABLE dbo.Rooms;
IF OBJECT_ID('dbo.Buildings', 'U') IS NOT NULL DROP TABLE dbo.Buildings;
IF OBJECT_ID('dbo.Users', 'U') IS NOT NULL DROP TABLE dbo.Users;
IF OBJECT_ID('dbo.AuditLog', 'U') IS NOT NULL DROP TABLE dbo.AuditLog;
IF OBJECT_ID('dbo.Sensors', 'U') IS NOT NULL DROP TABLE dbo.Sensors;
IF OBJECT_ID('dbo.Evidence', 'U') IS NOT NULL DROP TABLE dbo.Evidence;
IF OBJECT_ID('dbo.Incidents', 'U') IS NOT NULL DROP TABLE dbo.Incidents;
GO

-- Create Tables
CREATE TABLE Users (
    id NVARCHAR(100) PRIMARY KEY,
    email NVARCHAR(255) NOT NULL UNIQUE,
    displayName NVARCHAR(255),
    photoURL NVARCHAR(MAX),
    role NVARCHAR(50) NOT NULL,
    permissions NVARCHAR(MAX),
    accessibleBuildingIds NVARCHAR(MAX),
    lastLoginAt DATETIME2 NOT NULL,
    preferences NVARCHAR(MAX),
    isTestData BIT NOT NULL DEFAULT 0
);
GO

CREATE TABLE Buildings (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    address NVARCHAR(255),
    isTestData BIT NOT NULL DEFAULT 0
);
GO

CREATE TABLE Rooms (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    buildingId NVARCHAR(50) NOT NULL,
    largura FLOAT,
    widthM FLOAT,
    tileWidthCm FLOAT,
    tileHeightCm FLOAT,
    xAxisNaming NVARCHAR(20) DEFAULT 'alpha',
    yAxisNaming NVARCHAR(20) DEFAULT 'numeric',
    backgroundImageUrl NVARCHAR(MAX),
    backgroundScale FLOAT,
    backgroundPosX FLOAT,
    backgroundPosY FLOAT,
    isTestData BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (buildingId) REFERENCES Buildings(id) ON DELETE CASCADE
);
GO

CREATE TABLE ItemTypes (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    category NVARCHAR(100) NOT NULL,
    defaultWidthM FLOAT NOT NULL,
    defaultHeightM FLOAT NOT NULL,
    iconName NVARCHAR(50),
    canHaveChildren BIT NOT NULL DEFAULT 0,
    isResizable BIT NOT NULL DEFAULT 1,
    status NVARCHAR(50) NOT NULL DEFAULT 'active',
    isTestData BIT NOT NULL DEFAULT 0,
    defaultColor NVARCHAR(50)
);
GO

CREATE TABLE ItemTypesEqp (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    category NVARCHAR(100) NOT NULL,
    defaultWidthM FLOAT NOT NULL,
    defaultHeightM FLOAT NOT NULL,
    iconName NVARCHAR(50),
    status NVARCHAR(50) NOT NULL DEFAULT 'active',
    isTestData BIT NOT NULL DEFAULT 0,
    defaultColor NVARCHAR(50)
);
GO

CREATE TABLE Manufacturers (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    isTestData BIT NOT NULL DEFAULT 0
);
GO

CREATE TABLE Models (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL,
    manufacturerId NVARCHAR(50) NOT NULL,
    portConfig NVARCHAR(MAX),
    tamanhoU INT,
    isTestData BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (manufacturerId) REFERENCES Manufacturers(id) ON DELETE CASCADE,
    UNIQUE (name, manufacturerId)
);
GO

CREATE TABLE ItemStatuses (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    description NVARCHAR(255),
    color NVARCHAR(20) NOT NULL,
    isArchived BIT NOT NULL DEFAULT 0,
    isDefault BIT NOT NULL DEFAULT 0
);
GO

CREATE TABLE ParentItems (
    id NVARCHAR(50) PRIMARY KEY,
    label NVARCHAR(100) NOT NULL,
    x INT NOT NULL DEFAULT 0,
    y INT NOT NULL DEFAULT 0,
    width FLOAT NOT NULL DEFAULT 0.6,
    height FLOAT NOT NULL DEFAULT 1.0,
    type NVARCHAR(50) NOT NULL,
    status NVARCHAR(50) NOT NULL,
    roomId NVARCHAR(50),
    serialNumber NVARCHAR(100),
    brand NVARCHAR(100),
    tag NVARCHAR(100),
    isTagEligible BIT,
    ownerEmail NVARCHAR(255),
    dataSheetUrl NVARCHAR(MAX),
    description NVARCHAR(MAX),
    imageUrl NVARCHAR(MAX),
    modelo NVARCHAR(100),
    preco FLOAT,
    trellisId NVARCHAR(100),
    tamanhoU INT,
    potenciaW INT,
    color NVARCHAR(50),
    isTestData BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (roomId) REFERENCES Rooms(id) ON DELETE SET NULL,
    FOREIGN KEY (status) REFERENCES ItemStatuses(id)
);
GO

CREATE TABLE ChildItems (
    id NVARCHAR(50) PRIMARY KEY,
    label NVARCHAR(100) NOT NULL,
    parentId NVARCHAR(50) NOT NULL,
    type NVARCHAR(50) NOT NULL,
    status NVARCHAR(50) NOT NULL,
    serialNumber NVARCHAR(100),
    brand NVARCHAR(100),
    tag NVARCHAR(100),
    isTagEligible BIT,
    ownerEmail NVARCHAR(255),
    dataSheetUrl NVARCHAR(MAX),
    description NVARCHAR(MAX),
    imageUrl NVARCHAR(MAX),
    modelo NVARCHAR(100),
    preco FLOAT,
    trellisId NVARCHAR(100),
    tamanhoU INT,
    posicaoU INT,
    isTestData BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (parentId) REFERENCES ParentItems(id) ON DELETE CASCADE,
    FOREIGN KEY (status) REFERENCES ItemStatuses(id)
);
GO

CREATE TABLE PortTypes (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    description NVARCHAR(255),
    isDefault BIT NOT NULL DEFAULT 0
);
GO

CREATE TABLE ConnectionTypes (
    id NVARCHAR(50) PRIMARY KEY,
    name NVARCHAR(100) NOT NULL UNIQUE,
    description NVARCHAR(255),
    isDefault BIT NOT NULL DEFAULT 0
);
GO

CREATE TABLE EquipmentPorts (
    id NVARCHAR(50) PRIMARY KEY,
    childItemId NVARCHAR(50) NOT NULL,
    portTypeId NVARCHAR(50) NOT NULL,
    label NVARCHAR(100) NOT NULL,
    status NVARCHAR(50) NOT NULL DEFAULT 'down',
    connectedToPortId NVARCHAR(50),
    notes NVARCHAR(MAX),
    FOREIGN KEY (childItemId) REFERENCES ChildItems(id) ON DELETE CASCADE,
    FOREIGN KEY (portTypeId) REFERENCES PortTypes(id),
    FOREIGN KEY (connectedToPortId) REFERENCES EquipmentPorts(id),
    UNIQUE(connectedToPortId)
);
GO

CREATE TABLE Connections (
    id NVARCHAR(50) PRIMARY KEY,
    portA_id NVARCHAR(50) NOT NULL,
    portB_id NVARCHAR(50) NOT NULL,
    connectionTypeId NVARCHAR(50) NOT NULL,
    label NVARCHAR(255),
    status NVARCHAR(50) NOT NULL DEFAULT 'active',
    isTestData BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (portA_id) REFERENCES EquipmentPorts(id),
    FOREIGN KEY (portB_id) REFERENCES EquipmentPorts(id),
    FOREIGN KEY (connectionTypeId) REFERENCES ConnectionTypes(id),
    UNIQUE (portA_id),
    UNIQUE (portB_id)
);
GO

CREATE TABLE AuditLog (
    id INT IDENTITY(1,1) PRIMARY KEY,
    timestamp DATETIME2 NOT NULL DEFAULT GETUTCDATE(),
    userId NVARCHAR(100) NOT NULL,
    userDisplayName NVARCHAR(255),
    action NVARCHAR(255) NOT NULL,
    entityType NVARCHAR(50),
    entityId NVARCHAR(100),
    details NVARCHAR(MAX)
);
GO

CREATE TABLE Incidents (
    id NVARCHAR(50) PRIMARY KEY,
    description NVARCHAR(MAX) NOT NULL,
    severity NVARCHAR(50) NOT NULL CHECK (severity IN ('critical', 'high', 'medium', 'low')),
    status NVARCHAR(50) NOT NULL CHECK (status IN ('open', 'investigating', 'closed')),
    detectedAt DATETIME2 NOT NULL,
    resolvedAt DATETIME2,
    entityType NVARCHAR(50),
    entityId NVARCHAR(100)
);
GO

CREATE TABLE Evidence (
    id NVARCHAR(50) PRIMARY KEY,
    incidentId NVARCHAR(50) NOT NULL,
    timestamp DATETIME2 NOT NULL,
    type NVARCHAR(50) NOT NULL,
    data NVARCHAR(MAX) NOT NULL,
    FOREIGN KEY (incidentId) REFERENCES Incidents(id) ON DELETE CASCADE
);
GO

CREATE TABLE Sensors (
    id NVARCHAR(50) PRIMARY KEY,
    itemId NVARCHAR(50) NOT NULL,
    type NVARCHAR(100) NOT NULL,
    value FLOAT,
    unit NVARCHAR(20),
    lastReading DATETIME2,
    FOREIGN KEY (itemId) REFERENCES ParentItems(id) ON DELETE CASCADE
);
GO

-- Insert Initial Data
INSERT INTO Users (id, email, displayName, photoURL, role, permissions, accessibleBuildingIds, lastLoginAt, isTestData) 
VALUES ('dev_user', 'dev@dev.com', 'Desenvolvedor Padrão', NULL, 'developer', '["*"]', '[]', GETUTCDATE(), 1);
GO

INSERT INTO Buildings (id, name, address, isTestData)
VALUES ('B_initial', 'DC-TESTE', 'Local de Testes Iniciais', 1);
GO

INSERT INTO Rooms (id, name, buildingId, isTestData)
VALUES ('R_initial', 'SALA-TESTE', 'B_initial', 1);
GO

INSERT INTO ItemStatuses (id, name, description, color, isArchived, isDefault)
VALUES 
('draft', 'Rascunho', 'Item recém-criado, aguardando submissão.', 'amber', 0, 1),
('pending_approval', 'Pendente', 'Item submetido, aguardando aprovação.', 'yellow', 0, 1),
('active', 'Ativo', 'Item aprovado e operacional.', 'green', 0, 1),
('maintenance', 'Manutenção', 'Item em manutenção, temporariamente indisponível.', 'orange', 0, 1),
('decommissioned', 'Descomissionado', 'Item removido e movido para a lixeira.', 'gray', 1, 1);
GO

INSERT INTO PortTypes (id, name, description, isDefault)
VALUES
('port_rj45', 'RJ45', 'Conector de rede padrão para cabos UTP (par trançado).', 1),
('port_sfp', 'SFP/SFP+', 'Conector para transceptores ópticos ou de cobre de pequena dimensão.', 1);
GO

INSERT INTO ConnectionTypes (id, name, description, isDefault)
VALUES
('conn_utp', 'Dados UTP', 'Conexão de dados via cabo de par trançado.', 1),
('conn_fibra', 'Fibra Óptica', 'Conexão de dados via fibra óptica monomodo ou multimodo.', 1);
GO


PRINT 'InfraVision Database Setup Completed Successfully.';
GO
